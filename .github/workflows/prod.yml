name: Production-Workflow
on:
  push:
    tags:
      - v*             # Push events to v1 tag
  pull_request:
    tags:
      - v*             # Push events to v1 tag
  # Also trigger on page_build, as well as release created events
  page_build:
  release:
    types: # This configuration does not affect the page_build event above
      - created

env:
  AWS_REGION: ca-central-1                  # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: tiptap           # set this to your Amazon ECR repository name
  ECS_SERVICE: sample-app-service               # set this to your Amazon ECS service name
  ECS_CLUSTER: test-tiptap               # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: taskdefinition.json # set this to the path to your Amazon ECS task definition
  CONTAINER_NAME: sample-app

defaults:
  run:
    shell: bash

jobs:



  build-stage:
    name: Build-Production
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'
          check-latest: true
      - name: Cache SonarCloud packages
        uses: actions/cache@v2.1.6
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v2.1.6
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any

        run: mvn package

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}


      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
          
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          #IMAGE_TAG: ${{ steps.tag-number.outputs.tag }}
        run: |
           VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
           [[ "${{ github.ref }}" == "refs/tags/"* ]]   
      
           echo VERSION=$VERSION
     
 
           # Build and push the base image to ECR so that it can be deployed to ECS.
        
           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION .
           # docker tag $ECR_REGISTRY/$ECR_REPOSITORY $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION
           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION
           echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$VERSION"
           
     # - name: Download task definition
      #  id: download-task
       # run: |
        #  aws ecs describe-task-definition --task-definition first-run-task-definition --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
