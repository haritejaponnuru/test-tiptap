name: Stagging Workflow
on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Manual deployement to stagging'
        required: true
        default: 'main'
  ###Staging environment variable


  AWS_REGION_STAGE: us-east-1                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY_STAGE: tiptappay_web           # set this to your Amazon ECR repository name
  ECS_SERVICE_STAGE: tiptappay_stage_http                 # set this to your Amazon ECS service name
  ECS_CLUSTER_STAGE: TTP-Stage                        # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION_STAGE: ecs-taskdefinition-stage.json # set this to the path to your Amazon ECS task definition
  CONTAINER_NAME_STAGE: tiptappay_web

defaults:
  run:
    shell: bash

jobs:
  build-stage:
    name: Build-Staging
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'
          check-latest: true
      - name: Cache SonarCloud packages
        uses: actions/cache@v2.1.5
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v2.1.5
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION_STAGE }}


      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY_STAGE: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG_STAGE: ${{ steps.get_version.outputs.VERSION }}
        run: |
        # Build a docker container and push it to ECR so that it can be deployed to ECS.
          docker build -t $ECR_REGISTRY_STAGE/$ECR_REPOSITORY_STAGE:$IMAGE_TAG_STAGE .
          docker push $ECR_REGISTRY_STAGE_STAGE/$ECR_REPOSITORY_STAGE:$IMAGE_TAG_STAGE
          echo "::set-output name=image::$ECR_REGISTRY_STAGE/$ECR_REPOSITORY_STAGE:$IMAGE_TAG_STAGE"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION_STAGE }}
          container-name: ${{ env.CONTAINER_NAME_STAGE }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_STAGE }}
          cluster: ${{ env.ECS_CLUSTER_STAGE }}
          wait-for-service-stability: true





